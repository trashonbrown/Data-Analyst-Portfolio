<?xml version="1.0" encoding="UTF-8"?><sqlb_project><db path="/Users/trashonbrown/Documents/Python Projects/Data Anyalst Portfolio /Project 1 | SQL Data Exploration/Project 3/Nashville Housing.db" readonly="0" foreign_keys="1" case_sensitive_like="0" temp_store="0" wal_autocheckpoint="1000" synchronous="2"/><attached/><window><main_tabs open="structure browser pragmas query" current="3"/></window><tab_structure><column_width id="0" width="300"/><column_width id="1" width="0"/><column_width id="2" width="100"/><column_width id="3" width="1875"/><column_width id="4" width="0"/><expanded_item id="0" parent="1"/><expanded_item id="1" parent="1"/><expanded_item id="2" parent="1"/><expanded_item id="3" parent="1"/><expanded_item id="4" parent="1"/></tab_structure><tab_browse><current_table name="4,9:mainnashville"/><default_encoding codec=""/><browse_table_settings><table schema="main" name="Nashville Housing Data for Data Cleaning" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="56"/><column index="2" value="102"/><column index="3" value="148"/><column index="4" value="254"/><column index="5" value="108"/><column index="6" value="58"/><column index="7" value="113"/><column index="8" value="82"/><column index="9" value="300"/><column index="10" value="266"/><column index="11" value="51"/><column index="12" value="158"/><column index="13" value="62"/><column index="14" value="80"/><column index="15" value="64"/><column index="16" value="55"/><column index="17" value="60"/><column index="18" value="50"/><column index="19" value="53"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="nashville" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="56"/><column index="2" value="102"/><column index="3" value="148"/><column index="4" value="187"/><column index="5" value="108"/><column index="6" value="58"/><column index="7" value="113"/><column index="8" value="82"/><column index="9" value="300"/><column index="10" value="266"/><column index="11" value="51"/><column index="12" value="158"/><column index="13" value="62"/><column index="14" value="80"/><column index="15" value="64"/><column index="16" value="55"/><column index="17" value="60"/><column index="18" value="50"/><column index="19" value="53"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table></browse_table_settings></tab_browse><tab_sql><sql name="SQL 1">
-- Populate Property Address data

SELECT * FROM nashville
--Where PropertyAddress is null
ORDER BY ParcelID;


-- Create a temporary table to store the results of the subquery
CREATE TEMPORARY TABLE temp_table AS 
SELECT a.UniqueID, b.PropertyAddress
FROM nashville a
JOIN nashville b
	ON a.ParcelID = b.ParcelID
	AND a.UniqueID &lt;&gt; b.UniqueID
	WHERE a.PropertyAddress IS NULL;

-- Update the original table with the values from the temporary table
UPDATE nashville
SET PropertyAddress = (
	SELECT PropertyAddress
	FROM temp_table
	WHERE UniqueID = nashville.UniqueID
)
WHERE UniqueID IN (
	SELECT UniqueID
	FROM temp_table
);


--Breaking out Address into Individual Columns (Address, City, State)
SELECT PropertyAddress FROM nashville
--Where PropertyAddress is null
--ORDER BY ParcelID;

SELECT 
  SUBSTR(PropertyAddress, 1, INSTR(PropertyAddress, ',') - 1) as Address,
  SUBSTR(PropertyAddress, INSTR(PropertyAddress, ',') + 1) as Address2
FROM nashville


ALTER TABLE nashville
Add PropertySplitAddress Nvarchar(255);

Update nashville
SET PropertySplitAddress =SUBSTR(PropertyAddress, 1, INSTR(PropertyAddress, ',') - 1) 


ALTER TABLE nashville
Add PropertySplitCity Nvarchar(255);

Update nashville
SET PropertySplitCity =  SUBSTR(PropertyAddress, INSTR(PropertyAddress, ',') + 1)

SELECT * FROM nashville


Select OwnerAddress
From nashville;

SELECT 
    substr(OwnerAddress, 1, instr(OwnerAddress, ',') - 1) AS Part1,
    replace(rtrim(substr(OwnerAddress,  instr(OwnerAddress, ',') + 1, instr(OwnerAddress, ' TN') - instr(OwnerAddress, ',') - 1)), ',', '') AS Part2,
    'TN' AS Part3
FROM nashville;



ALTER TABLE nashville
Add OwnerSplitAddress Nvarchar(255);

Update nashville
SET OwnerSplitAddress = substr(OwnerAddress, 1, instr(OwnerAddress, ',') - 1) 


ALTER TABLE nashville
Add OwnerSplitCity Nvarchar(255);

Update nashville
SET OwnerSplitCity = replace(rtrim(substr(OwnerAddress,  instr(OwnerAddress, ',') + 1, instr(OwnerAddress, ' TN') - instr(OwnerAddress, ',') - 1)), ',', '')

ALTER TABLE nashville
Add OwnerSplitState Nvarchar(255);

Update nashville
SET OwnerSplitState = CASE WHEN OwnerAddress LIKE '% TN' THEN 'TN' ELSE NULL END;


SELECT * FROM nashville

-- Change Y and N to Yes and No in &quot;Sold as Vacant&quot; field


SELECT DISTINCT(SoldAsVacant), COUNT(SoldAsVacant)
From nashville
Group by SoldAsVacant
order by 2;


SELECT SoldAsVacant
, CASE WHEN SoldAsVacant = 'Y' THEN 'Yes'
	   WHEN SoldAsVacant = 'N' THEN 'No'
	   ELSE SoldAsVacant
	   END
From nashville


Update nashville
SET SoldAsVacant = CASE When SoldAsVacant = 'Y' THEN 'Yes'
	   When SoldAsVacant = 'N' THEN 'No'
	   ELSE SoldAsVacant
	   END

	   
-- Remove Duplicates

DELETE FROM nashville
WHERE UniqueID IN (
  SELECT UniqueID
  FROM (
    SELECT UniqueID,
           ROW_NUMBER() OVER (
             PARTITION BY ParcelID,
                          PropertyAddress,
                          SalePrice,
                          SaleDate,
                          LegalReference
             ORDER BY UniqueID
           ) row_num
    FROM nashville
  ) t
  WHERE row_num &gt; 1
);
--Order by PropertyAddress

SELECT ParcelID, PropertyAddress, SalePrice, SaleDate, LegalReference, COUNT(*) as num_duplicates
FROM nashville
GROUP BY ParcelID, PropertyAddress, SalePrice, SaleDate, LegalReference
HAVING COUNT(*) &gt; 1;


-- Delete Unused Columns

Select *
From nashville;


-- Create a new table with desired columns
CREATE TABLE nashville_new AS
SELECT UniqueID, ParcelID, LandUse, LegalReference, SoldAsVacant, OwnerName,  Acreage, LandValue
,BuildingValue, TotalValue, YearBuilt, Bedrooms, FullBath, HalfBath, PropertySplitAddress, PropertySplitCity, OwnerSplitAddress
,OwnerSplitCity, OwnerSplitState
FROM nashville;

-- Drop the old table
DROP TABLE nashville;

-- Rename the new table to the old table name
ALTER TABLE nashville_new RENAME TO nashville;


</sql><current_tab id="0"/></tab_sql></sqlb_project>
